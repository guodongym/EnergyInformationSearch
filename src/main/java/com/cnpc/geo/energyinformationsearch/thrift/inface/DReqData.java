/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cnpc.geo.energyinformationsearch.thrift.inface;

import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-8-5")
public class DReqData implements org.apache.thrift.TBase<DReqData, DReqData._Fields>, java.io.Serializable, Cloneable, Comparable<DReqData> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DReqData");
	private static final org.apache.thrift.protocol.TField SEQUENCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sequenceID", org.apache.thrift.protocol.TType.STRING, (short) 1);
	private static final org.apache.thrift.protocol.TField H_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hID", org.apache.thrift.protocol.TType.STRING, (short) 2);
	private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short) 3);
	private static final org.apache.thrift.protocol.TField FILE_EXTENTION_FIELD_DESC = new org.apache.thrift.protocol.TField("fileExtention", org.apache.thrift.protocol.TType.STRING, (short) 4);
	private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short) 5);
	private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.STRING, (short) 6);
	private static final org.apache.thrift.protocol.TField ORIGINAL_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("originalFile", org.apache.thrift.protocol.TType.STRING, (short) 7);
	private static final org.apache.thrift.protocol.TField E_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("eID", org.apache.thrift.protocol.TType.STRING, (short) 8);
	private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short) 9);
	private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.STRING, (short) 10);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new DReqDataStandardSchemeFactory());
		schemes.put(TupleScheme.class, new DReqDataTupleSchemeFactory());
	}

	public String sequenceID; // required
	public String hID; // required
	public String fileName; // required
	public String fileExtention; // required
	public String description; // required
	public String tags; // required
	public ByteBuffer originalFile; // required
	public String eID; // required
	public String title; // required
	public String userID; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		SEQUENCE_ID((short) 1, "sequenceID"), H_ID((short) 2, "hID"), FILE_NAME((short) 3, "fileName"), FILE_EXTENTION((short) 4, "fileExtention"), DESCRIPTION((short) 5, "description"), TAGS((short) 6, "tags"), ORIGINAL_FILE((short) 7, "originalFile"), E_ID((short) 8, "eID"), TITLE((short) 9, "title"), USER_ID((short) 10, "userID");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // SEQUENCE_ID
				return SEQUENCE_ID;
			case 2: // H_ID
				return H_ID;
			case 3: // FILE_NAME
				return FILE_NAME;
			case 4: // FILE_EXTENTION
				return FILE_EXTENTION;
			case 5: // DESCRIPTION
				return DESCRIPTION;
			case 6: // TAGS
				return TAGS;
			case 7: // ORIGINAL_FILE
				return ORIGINAL_FILE;
			case 8: // E_ID
				return E_ID;
			case 9: // TITLE
				return TITLE;
			case 10: // USER_ID
				return USER_ID;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
		tmpMap.put(_Fields.SEQUENCE_ID, new org.apache.thrift.meta_data.FieldMetaData("sequenceID", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.H_ID, new org.apache.thrift.meta_data.FieldMetaData("hID", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.FILE_EXTENTION, new org.apache.thrift.meta_data.FieldMetaData("fileExtention", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.ORIGINAL_FILE, new org.apache.thrift.meta_data.FieldMetaData("originalFile", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, true)));
		tmpMap.put(_Fields.E_ID, new org.apache.thrift.meta_data.FieldMetaData("eID", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DReqData.class, metaDataMap);
	}

	public DReqData() {
	}

	public DReqData(String sequenceID, String hID, String fileName, String fileExtention, String description, String tags, ByteBuffer originalFile, String eID, String title, String userID) {
		this();
		this.sequenceID = sequenceID;
		this.hID = hID;
		this.fileName = fileName;
		this.fileExtention = fileExtention;
		this.description = description;
		this.tags = tags;
		this.originalFile = org.apache.thrift.TBaseHelper.copyBinary(originalFile);
		this.eID = eID;
		this.title = title;
		this.userID = userID;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public DReqData(DReqData other) {
		if (other.isSetSequenceID()) {
			this.sequenceID = other.sequenceID;
		}
		if (other.isSetHID()) {
			this.hID = other.hID;
		}
		if (other.isSetFileName()) {
			this.fileName = other.fileName;
		}
		if (other.isSetFileExtention()) {
			this.fileExtention = other.fileExtention;
		}
		if (other.isSetDescription()) {
			this.description = other.description;
		}
		if (other.isSetTags()) {
			this.tags = other.tags;
		}
		if (other.isSetOriginalFile()) {
			this.originalFile = org.apache.thrift.TBaseHelper.copyBinary(other.originalFile);
		}
		if (other.isSetEID()) {
			this.eID = other.eID;
		}
		if (other.isSetTitle()) {
			this.title = other.title;
		}
		if (other.isSetUserID()) {
			this.userID = other.userID;
		}
	}

	public DReqData deepCopy() {
		return new DReqData(this);
	}

	@Override
	public void clear() {
		this.sequenceID = null;
		this.hID = null;
		this.fileName = null;
		this.fileExtention = null;
		this.description = null;
		this.tags = null;
		this.originalFile = null;
		this.eID = null;
		this.title = null;
		this.userID = null;
	}

	public String getSequenceID() {
		return this.sequenceID;
	}

	public DReqData setSequenceID(String sequenceID) {
		this.sequenceID = sequenceID;
		return this;
	}

	public void unsetSequenceID() {
		this.sequenceID = null;
	}

	/**
	 * Returns true if field sequenceID is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetSequenceID() {
		return this.sequenceID != null;
	}

	public void setSequenceIDIsSet(boolean value) {
		if (!value) {
			this.sequenceID = null;
		}
	}

	public String getHID() {
		return this.hID;
	}

	public DReqData setHID(String hID) {
		this.hID = hID;
		return this;
	}

	public void unsetHID() {
		this.hID = null;
	}

	/**
	 * Returns true if field hID is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetHID() {
		return this.hID != null;
	}

	public void setHIDIsSet(boolean value) {
		if (!value) {
			this.hID = null;
		}
	}

	public String getFileName() {
		return this.fileName;
	}

	public DReqData setFileName(String fileName) {
		this.fileName = fileName;
		return this;
	}

	public void unsetFileName() {
		this.fileName = null;
	}

	/**
	 * Returns true if field fileName is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetFileName() {
		return this.fileName != null;
	}

	public void setFileNameIsSet(boolean value) {
		if (!value) {
			this.fileName = null;
		}
	}

	public String getFileExtention() {
		return this.fileExtention;
	}

	public DReqData setFileExtention(String fileExtention) {
		this.fileExtention = fileExtention;
		return this;
	}

	public void unsetFileExtention() {
		this.fileExtention = null;
	}

	/**
	 * Returns true if field fileExtention is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSetFileExtention() {
		return this.fileExtention != null;
	}

	public void setFileExtentionIsSet(boolean value) {
		if (!value) {
			this.fileExtention = null;
		}
	}

	public String getDescription() {
		return this.description;
	}

	public DReqData setDescription(String description) {
		this.description = description;
		return this;
	}

	public void unsetDescription() {
		this.description = null;
	}

	/**
	 * Returns true if field description is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetDescription() {
		return this.description != null;
	}

	public void setDescriptionIsSet(boolean value) {
		if (!value) {
			this.description = null;
		}
	}

	public String getTags() {
		return this.tags;
	}

	public DReqData setTags(String tags) {
		this.tags = tags;
		return this;
	}

	public void unsetTags() {
		this.tags = null;
	}

	/**
	 * Returns true if field tags is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetTags() {
		return this.tags != null;
	}

	public void setTagsIsSet(boolean value) {
		if (!value) {
			this.tags = null;
		}
	}

	public byte[] getOriginalFile() {
		setOriginalFile(org.apache.thrift.TBaseHelper.rightSize(originalFile));
		return originalFile == null ? null : originalFile.array();
	}

	public ByteBuffer bufferForOriginalFile() {
		return org.apache.thrift.TBaseHelper.copyBinary(originalFile);
	}

	public DReqData setOriginalFile(byte[] originalFile) {
		this.originalFile = originalFile == null ? (ByteBuffer) null : ByteBuffer.wrap(Arrays.copyOf(originalFile, originalFile.length));
		return this;
	}

	public DReqData setOriginalFile(ByteBuffer originalFile) {
		this.originalFile = org.apache.thrift.TBaseHelper.copyBinary(originalFile);
		return this;
	}

	public void unsetOriginalFile() {
		this.originalFile = null;
	}

	/**
	 * Returns true if field originalFile is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetOriginalFile() {
		return this.originalFile != null;
	}

	public void setOriginalFileIsSet(boolean value) {
		if (!value) {
			this.originalFile = null;
		}
	}

	public String getEID() {
		return this.eID;
	}

	public DReqData setEID(String eID) {
		this.eID = eID;
		return this;
	}

	public void unsetEID() {
		this.eID = null;
	}

	/**
	 * Returns true if field eID is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetEID() {
		return this.eID != null;
	}

	public void setEIDIsSet(boolean value) {
		if (!value) {
			this.eID = null;
		}
	}

	public String getTitle() {
		return this.title;
	}

	public DReqData setTitle(String title) {
		this.title = title;
		return this;
	}

	public void unsetTitle() {
		this.title = null;
	}

	/**
	 * Returns true if field title is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetTitle() {
		return this.title != null;
	}

	public void setTitleIsSet(boolean value) {
		if (!value) {
			this.title = null;
		}
	}

	public String getUserID() {
		return this.userID;
	}

	public DReqData setUserID(String userID) {
		this.userID = userID;
		return this;
	}

	public void unsetUserID() {
		this.userID = null;
	}

	/**
	 * Returns true if field userID is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetUserID() {
		return this.userID != null;
	}

	public void setUserIDIsSet(boolean value) {
		if (!value) {
			this.userID = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case SEQUENCE_ID:
			if (value == null) {
				unsetSequenceID();
			} else {
				setSequenceID((String) value);
			}
			break;

		case H_ID:
			if (value == null) {
				unsetHID();
			} else {
				setHID((String) value);
			}
			break;

		case FILE_NAME:
			if (value == null) {
				unsetFileName();
			} else {
				setFileName((String) value);
			}
			break;

		case FILE_EXTENTION:
			if (value == null) {
				unsetFileExtention();
			} else {
				setFileExtention((String) value);
			}
			break;

		case DESCRIPTION:
			if (value == null) {
				unsetDescription();
			} else {
				setDescription((String) value);
			}
			break;

		case TAGS:
			if (value == null) {
				unsetTags();
			} else {
				setTags((String) value);
			}
			break;

		case ORIGINAL_FILE:
			if (value == null) {
				unsetOriginalFile();
			} else {
				setOriginalFile((ByteBuffer) value);
			}
			break;

		case E_ID:
			if (value == null) {
				unsetEID();
			} else {
				setEID((String) value);
			}
			break;

		case TITLE:
			if (value == null) {
				unsetTitle();
			} else {
				setTitle((String) value);
			}
			break;

		case USER_ID:
			if (value == null) {
				unsetUserID();
			} else {
				setUserID((String) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case SEQUENCE_ID:
			return getSequenceID();

		case H_ID:
			return getHID();

		case FILE_NAME:
			return getFileName();

		case FILE_EXTENTION:
			return getFileExtention();

		case DESCRIPTION:
			return getDescription();

		case TAGS:
			return getTags();

		case ORIGINAL_FILE:
			return getOriginalFile();

		case E_ID:
			return getEID();

		case TITLE:
			return getTitle();

		case USER_ID:
			return getUserID();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case SEQUENCE_ID:
			return isSetSequenceID();
		case H_ID:
			return isSetHID();
		case FILE_NAME:
			return isSetFileName();
		case FILE_EXTENTION:
			return isSetFileExtention();
		case DESCRIPTION:
			return isSetDescription();
		case TAGS:
			return isSetTags();
		case ORIGINAL_FILE:
			return isSetOriginalFile();
		case E_ID:
			return isSetEID();
		case TITLE:
			return isSetTitle();
		case USER_ID:
			return isSetUserID();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof DReqData)
			return this.equals((DReqData) that);
		return false;
	}

	public boolean equals(DReqData that) {
		if (that == null)
			return false;

		boolean this_present_sequenceID = true && this.isSetSequenceID();
		boolean that_present_sequenceID = true && that.isSetSequenceID();
		if (this_present_sequenceID || that_present_sequenceID) {
			if (!(this_present_sequenceID && that_present_sequenceID))
				return false;
			if (!this.sequenceID.equals(that.sequenceID))
				return false;
		}

		boolean this_present_hID = true && this.isSetHID();
		boolean that_present_hID = true && that.isSetHID();
		if (this_present_hID || that_present_hID) {
			if (!(this_present_hID && that_present_hID))
				return false;
			if (!this.hID.equals(that.hID))
				return false;
		}

		boolean this_present_fileName = true && this.isSetFileName();
		boolean that_present_fileName = true && that.isSetFileName();
		if (this_present_fileName || that_present_fileName) {
			if (!(this_present_fileName && that_present_fileName))
				return false;
			if (!this.fileName.equals(that.fileName))
				return false;
		}

		boolean this_present_fileExtention = true && this.isSetFileExtention();
		boolean that_present_fileExtention = true && that.isSetFileExtention();
		if (this_present_fileExtention || that_present_fileExtention) {
			if (!(this_present_fileExtention && that_present_fileExtention))
				return false;
			if (!this.fileExtention.equals(that.fileExtention))
				return false;
		}

		boolean this_present_description = true && this.isSetDescription();
		boolean that_present_description = true && that.isSetDescription();
		if (this_present_description || that_present_description) {
			if (!(this_present_description && that_present_description))
				return false;
			if (!this.description.equals(that.description))
				return false;
		}

		boolean this_present_tags = true && this.isSetTags();
		boolean that_present_tags = true && that.isSetTags();
		if (this_present_tags || that_present_tags) {
			if (!(this_present_tags && that_present_tags))
				return false;
			if (!this.tags.equals(that.tags))
				return false;
		}

		boolean this_present_originalFile = true && this.isSetOriginalFile();
		boolean that_present_originalFile = true && that.isSetOriginalFile();
		if (this_present_originalFile || that_present_originalFile) {
			if (!(this_present_originalFile && that_present_originalFile))
				return false;
			if (!this.originalFile.equals(that.originalFile))
				return false;
		}

		boolean this_present_eID = true && this.isSetEID();
		boolean that_present_eID = true && that.isSetEID();
		if (this_present_eID || that_present_eID) {
			if (!(this_present_eID && that_present_eID))
				return false;
			if (!this.eID.equals(that.eID))
				return false;
		}

		boolean this_present_title = true && this.isSetTitle();
		boolean that_present_title = true && that.isSetTitle();
		if (this_present_title || that_present_title) {
			if (!(this_present_title && that_present_title))
				return false;
			if (!this.title.equals(that.title))
				return false;
		}

		boolean this_present_userID = true && this.isSetUserID();
		boolean that_present_userID = true && that.isSetUserID();
		if (this_present_userID || that_present_userID) {
			if (!(this_present_userID && that_present_userID))
				return false;
			if (!this.userID.equals(that.userID))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_sequenceID = true && (isSetSequenceID());
		list.add(present_sequenceID);
		if (present_sequenceID)
			list.add(sequenceID);

		boolean present_hID = true && (isSetHID());
		list.add(present_hID);
		if (present_hID)
			list.add(hID);

		boolean present_fileName = true && (isSetFileName());
		list.add(present_fileName);
		if (present_fileName)
			list.add(fileName);

		boolean present_fileExtention = true && (isSetFileExtention());
		list.add(present_fileExtention);
		if (present_fileExtention)
			list.add(fileExtention);

		boolean present_description = true && (isSetDescription());
		list.add(present_description);
		if (present_description)
			list.add(description);

		boolean present_tags = true && (isSetTags());
		list.add(present_tags);
		if (present_tags)
			list.add(tags);

		boolean present_originalFile = true && (isSetOriginalFile());
		list.add(present_originalFile);
		if (present_originalFile)
			list.add(originalFile);

		boolean present_eID = true && (isSetEID());
		list.add(present_eID);
		if (present_eID)
			list.add(eID);

		boolean present_title = true && (isSetTitle());
		list.add(present_title);
		if (present_title)
			list.add(title);

		boolean present_userID = true && (isSetUserID());
		list.add(present_userID);
		if (present_userID)
			list.add(userID);

		return list.hashCode();
	}

	@Override
	public int compareTo(DReqData other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetSequenceID()).compareTo(other.isSetSequenceID());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSequenceID()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sequenceID, other.sequenceID);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetHID()).compareTo(other.isSetHID());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetHID()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hID, other.hID);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetFileName()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetFileExtention()).compareTo(other.isSetFileExtention());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetFileExtention()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileExtention, other.fileExtention);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDescription()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetTags()).compareTo(other.isSetTags());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTags()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetOriginalFile()).compareTo(other.isSetOriginalFile());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetOriginalFile()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originalFile, other.originalFile);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetEID()).compareTo(other.isSetEID());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetEID()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eID, other.eID);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTitle()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetUserID()).compareTo(other.isSetUserID());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUserID()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, other.userID);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("DReqData(");
		boolean first = true;

		sb.append("sequenceID:");
		if (this.sequenceID == null) {
			sb.append("null");
		} else {
			sb.append(this.sequenceID);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("hID:");
		if (this.hID == null) {
			sb.append("null");
		} else {
			sb.append(this.hID);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("fileName:");
		if (this.fileName == null) {
			sb.append("null");
		} else {
			sb.append(this.fileName);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("fileExtention:");
		if (this.fileExtention == null) {
			sb.append("null");
		} else {
			sb.append(this.fileExtention);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("description:");
		if (this.description == null) {
			sb.append("null");
		} else {
			sb.append(this.description);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("tags:");
		if (this.tags == null) {
			sb.append("null");
		} else {
			sb.append(this.tags);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("originalFile:");
		if (this.originalFile == null) {
			sb.append("null");
		} else {
			org.apache.thrift.TBaseHelper.toString(this.originalFile, sb);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("eID:");
		if (this.eID == null) {
			sb.append("null");
		} else {
			sb.append(this.eID);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("title:");
		if (this.title == null) {
			sb.append("null");
		} else {
			sb.append(this.title);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("userID:");
		if (this.userID == null) {
			sb.append("null");
		} else {
			sb.append(this.userID);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class DReqDataStandardSchemeFactory implements SchemeFactory {
		public DReqDataStandardScheme getScheme() {
			return new DReqDataStandardScheme();
		}
	}

	private static class DReqDataStandardScheme extends StandardScheme<DReqData> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, DReqData struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // SEQUENCE_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.sequenceID = iprot.readString();
						struct.setSequenceIDIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // H_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.hID = iprot.readString();
						struct.setHIDIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // FILE_NAME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.fileName = iprot.readString();
						struct.setFileNameIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // FILE_EXTENTION
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.fileExtention = iprot.readString();
						struct.setFileExtentionIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // DESCRIPTION
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.description = iprot.readString();
						struct.setDescriptionIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // TAGS
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.tags = iprot.readString();
						struct.setTagsIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // ORIGINAL_FILE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.originalFile = iprot.readBinary();
						struct.setOriginalFileIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // E_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.eID = iprot.readString();
						struct.setEIDIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // TITLE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.title = iprot.readString();
						struct.setTitleIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 10: // USER_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.userID = iprot.readString();
						struct.setUserIDIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, DReqData struct) throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.sequenceID != null) {
				oprot.writeFieldBegin(SEQUENCE_ID_FIELD_DESC);
				oprot.writeString(struct.sequenceID);
				oprot.writeFieldEnd();
			}
			if (struct.hID != null) {
				oprot.writeFieldBegin(H_ID_FIELD_DESC);
				oprot.writeString(struct.hID);
				oprot.writeFieldEnd();
			}
			if (struct.fileName != null) {
				oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
				oprot.writeString(struct.fileName);
				oprot.writeFieldEnd();
			}
			if (struct.fileExtention != null) {
				oprot.writeFieldBegin(FILE_EXTENTION_FIELD_DESC);
				oprot.writeString(struct.fileExtention);
				oprot.writeFieldEnd();
			}
			if (struct.description != null) {
				oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
				oprot.writeString(struct.description);
				oprot.writeFieldEnd();
			}
			if (struct.tags != null) {
				oprot.writeFieldBegin(TAGS_FIELD_DESC);
				oprot.writeString(struct.tags);
				oprot.writeFieldEnd();
			}
			if (struct.originalFile != null) {
				oprot.writeFieldBegin(ORIGINAL_FILE_FIELD_DESC);
				oprot.writeBinary(struct.originalFile);
				oprot.writeFieldEnd();
			}
			if (struct.eID != null) {
				oprot.writeFieldBegin(E_ID_FIELD_DESC);
				oprot.writeString(struct.eID);
				oprot.writeFieldEnd();
			}
			if (struct.title != null) {
				oprot.writeFieldBegin(TITLE_FIELD_DESC);
				oprot.writeString(struct.title);
				oprot.writeFieldEnd();
			}
			if (struct.userID != null) {
				oprot.writeFieldBegin(USER_ID_FIELD_DESC);
				oprot.writeString(struct.userID);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class DReqDataTupleSchemeFactory implements SchemeFactory {
		public DReqDataTupleScheme getScheme() {
			return new DReqDataTupleScheme();
		}
	}

	private static class DReqDataTupleScheme extends TupleScheme<DReqData> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, DReqData struct) throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetSequenceID()) {
				optionals.set(0);
			}
			if (struct.isSetHID()) {
				optionals.set(1);
			}
			if (struct.isSetFileName()) {
				optionals.set(2);
			}
			if (struct.isSetFileExtention()) {
				optionals.set(3);
			}
			if (struct.isSetDescription()) {
				optionals.set(4);
			}
			if (struct.isSetTags()) {
				optionals.set(5);
			}
			if (struct.isSetOriginalFile()) {
				optionals.set(6);
			}
			if (struct.isSetEID()) {
				optionals.set(7);
			}
			if (struct.isSetTitle()) {
				optionals.set(8);
			}
			if (struct.isSetUserID()) {
				optionals.set(9);
			}
			oprot.writeBitSet(optionals, 10);
			if (struct.isSetSequenceID()) {
				oprot.writeString(struct.sequenceID);
			}
			if (struct.isSetHID()) {
				oprot.writeString(struct.hID);
			}
			if (struct.isSetFileName()) {
				oprot.writeString(struct.fileName);
			}
			if (struct.isSetFileExtention()) {
				oprot.writeString(struct.fileExtention);
			}
			if (struct.isSetDescription()) {
				oprot.writeString(struct.description);
			}
			if (struct.isSetTags()) {
				oprot.writeString(struct.tags);
			}
			if (struct.isSetOriginalFile()) {
				oprot.writeBinary(struct.originalFile);
			}
			if (struct.isSetEID()) {
				oprot.writeString(struct.eID);
			}
			if (struct.isSetTitle()) {
				oprot.writeString(struct.title);
			}
			if (struct.isSetUserID()) {
				oprot.writeString(struct.userID);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, DReqData struct) throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(10);
			if (incoming.get(0)) {
				struct.sequenceID = iprot.readString();
				struct.setSequenceIDIsSet(true);
			}
			if (incoming.get(1)) {
				struct.hID = iprot.readString();
				struct.setHIDIsSet(true);
			}
			if (incoming.get(2)) {
				struct.fileName = iprot.readString();
				struct.setFileNameIsSet(true);
			}
			if (incoming.get(3)) {
				struct.fileExtention = iprot.readString();
				struct.setFileExtentionIsSet(true);
			}
			if (incoming.get(4)) {
				struct.description = iprot.readString();
				struct.setDescriptionIsSet(true);
			}
			if (incoming.get(5)) {
				struct.tags = iprot.readString();
				struct.setTagsIsSet(true);
			}
			if (incoming.get(6)) {
				struct.originalFile = iprot.readBinary();
				struct.setOriginalFileIsSet(true);
			}
			if (incoming.get(7)) {
				struct.eID = iprot.readString();
				struct.setEIDIsSet(true);
			}
			if (incoming.get(8)) {
				struct.title = iprot.readString();
				struct.setTitleIsSet(true);
			}
			if (incoming.get(9)) {
				struct.userID = iprot.readString();
				struct.setUserIDIsSet(true);
			}
		}
	}
}