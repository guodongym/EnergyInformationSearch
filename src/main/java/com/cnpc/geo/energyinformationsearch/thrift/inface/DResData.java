/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cnpc.geo.energyinformationsearch.thrift.inface;

import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-8-5")
public class DResData implements org.apache.thrift.TBase<DResData, DResData._Fields>, java.io.Serializable, Cloneable, Comparable<DResData> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DResData");
	private static final org.apache.thrift.protocol.TField SID_FIELD_DESC = new org.apache.thrift.protocol.TField("sid", org.apache.thrift.protocol.TType.STRING, (short) 1);
	private static final org.apache.thrift.protocol.TField RESULT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("resultCode", org.apache.thrift.protocol.TType.I32, (short) 2);
	private static final org.apache.thrift.protocol.TField RESULT_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("resultMsg", org.apache.thrift.protocol.TType.STRING, (short) 3);
	private static final org.apache.thrift.protocol.TField RES_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("resType", org.apache.thrift.protocol.TType.STRING, (short) 4);
	private static final org.apache.thrift.protocol.TField ORIGINAL_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("originalFile", org.apache.thrift.protocol.TType.STRING, (short) 5);
	private static final org.apache.thrift.protocol.TField SWF_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("swfFile", org.apache.thrift.protocol.TType.STRING, (short) 6);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new DResDataStandardSchemeFactory());
		schemes.put(TupleScheme.class, new DResDataTupleSchemeFactory());
	}

	public String sid; // required
	public int resultCode; // required
	public String resultMsg; // required
	public String resType; // required
	public ByteBuffer originalFile; // required
	public ByteBuffer swfFile; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		SID((short) 1, "sid"), RESULT_CODE((short) 2, "resultCode"), RESULT_MSG((short) 3, "resultMsg"), RES_TYPE((short) 4, "resType"), ORIGINAL_FILE((short) 5, "originalFile"), SWF_FILE((short) 6, "swfFile");
		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // SID
				return SID;
			case 2: // RESULT_CODE
				return RESULT_CODE;
			case 3: // RESULT_MSG
				return RESULT_MSG;
			case 4: // RES_TYPE
				return RES_TYPE;
			case 5: // ORIGINAL_FILE
				return ORIGINAL_FILE;
			case 6: // SWF_FILE
				return SWF_FILE;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __RESULTCODE_ISSET_ID = 0;
	private byte __isset_bitfield = 0;
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
		tmpMap.put(_Fields.SID, new org.apache.thrift.meta_data.FieldMetaData("sid", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.RESULT_CODE, new org.apache.thrift.meta_data.FieldMetaData("resultCode", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.RESULT_MSG, new org.apache.thrift.meta_data.FieldMetaData("resultMsg", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.RES_TYPE, new org.apache.thrift.meta_data.FieldMetaData("resType", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.ORIGINAL_FILE, new org.apache.thrift.meta_data.FieldMetaData("originalFile", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, true)));
		tmpMap.put(_Fields.SWF_FILE, new org.apache.thrift.meta_data.FieldMetaData("swfFile", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, true)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DResData.class, metaDataMap);
	}

	public DResData() {
	}

	public DResData(String sid, int resultCode, String resultMsg, String resType, ByteBuffer originalFile, ByteBuffer swfFile) {
		this();
		this.sid = sid;
		this.resultCode = resultCode;
		setResultCodeIsSet(true);
		this.resultMsg = resultMsg;
		this.resType = resType;
		this.originalFile = org.apache.thrift.TBaseHelper.copyBinary(originalFile);
		this.swfFile = org.apache.thrift.TBaseHelper.copyBinary(swfFile);
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public DResData(DResData other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetSid()) {
			this.sid = other.sid;
		}
		this.resultCode = other.resultCode;
		if (other.isSetResultMsg()) {
			this.resultMsg = other.resultMsg;
		}
		if (other.isSetResType()) {
			this.resType = other.resType;
		}
		if (other.isSetOriginalFile()) {
			this.originalFile = org.apache.thrift.TBaseHelper.copyBinary(other.originalFile);
		}
		if (other.isSetSwfFile()) {
			this.swfFile = org.apache.thrift.TBaseHelper.copyBinary(other.swfFile);
		}
	}

	public DResData deepCopy() {
		return new DResData(this);
	}

	@Override
	public void clear() {
		this.sid = null;
		setResultCodeIsSet(false);
		this.resultCode = 0;
		this.resultMsg = null;
		this.resType = null;
		this.originalFile = null;
		this.swfFile = null;
	}

	public String getSid() {
		return this.sid;
	}

	public DResData setSid(String sid) {
		this.sid = sid;
		return this;
	}

	public void unsetSid() {
		this.sid = null;
	}

	/**
	 * Returns true if field sid is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetSid() {
		return this.sid != null;
	}

	public void setSidIsSet(boolean value) {
		if (!value) {
			this.sid = null;
		}
	}

	public int getResultCode() {
		return this.resultCode;
	}

	public DResData setResultCode(int resultCode) {
		this.resultCode = resultCode;
		setResultCodeIsSet(true);
		return this;
	}

	public void unsetResultCode() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESULTCODE_ISSET_ID);
	}

	/**
	 * Returns true if field resultCode is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetResultCode() {
		return EncodingUtils.testBit(__isset_bitfield, __RESULTCODE_ISSET_ID);
	}

	public void setResultCodeIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESULTCODE_ISSET_ID, value);
	}

	public String getResultMsg() {
		return this.resultMsg;
	}

	public DResData setResultMsg(String resultMsg) {
		this.resultMsg = resultMsg;
		return this;
	}

	public void unsetResultMsg() {
		this.resultMsg = null;
	}

	/**
	 * Returns true if field resultMsg is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetResultMsg() {
		return this.resultMsg != null;
	}

	public void setResultMsgIsSet(boolean value) {
		if (!value) {
			this.resultMsg = null;
		}
	}

	public String getResType() {
		return this.resType;
	}

	public DResData setResType(String resType) {
		this.resType = resType;
		return this;
	}

	public void unsetResType() {
		this.resType = null;
	}

	/**
	 * Returns true if field resType is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetResType() {
		return this.resType != null;
	}

	public void setResTypeIsSet(boolean value) {
		if (!value) {
			this.resType = null;
		}
	}

	public byte[] getOriginalFile() {
		setOriginalFile(org.apache.thrift.TBaseHelper.rightSize(originalFile));
		return originalFile == null ? null : originalFile.array();
	}

	public ByteBuffer bufferForOriginalFile() {
		return org.apache.thrift.TBaseHelper.copyBinary(originalFile);
	}

	public DResData setOriginalFile(byte[] originalFile) {
		this.originalFile = originalFile == null ? (ByteBuffer) null : ByteBuffer.wrap(Arrays.copyOf(originalFile, originalFile.length));
		return this;
	}

	public DResData setOriginalFile(ByteBuffer originalFile) {
		this.originalFile = org.apache.thrift.TBaseHelper.copyBinary(originalFile);
		return this;
	}

	public void unsetOriginalFile() {
		this.originalFile = null;
	}

	/**
	 * Returns true if field originalFile is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetOriginalFile() {
		return this.originalFile != null;
	}

	public void setOriginalFileIsSet(boolean value) {
		if (!value) {
			this.originalFile = null;
		}
	}

	public byte[] getSwfFile() {
		setSwfFile(org.apache.thrift.TBaseHelper.rightSize(swfFile));
		return swfFile == null ? null : swfFile.array();
	}

	public ByteBuffer bufferForSwfFile() {
		return org.apache.thrift.TBaseHelper.copyBinary(swfFile);
	}

	public DResData setSwfFile(byte[] swfFile) {
		this.swfFile = swfFile == null ? (ByteBuffer) null : ByteBuffer.wrap(Arrays.copyOf(swfFile, swfFile.length));
		return this;
	}

	public DResData setSwfFile(ByteBuffer swfFile) {
		this.swfFile = org.apache.thrift.TBaseHelper.copyBinary(swfFile);
		return this;
	}

	public void unsetSwfFile() {
		this.swfFile = null;
	}

	/**
	 * Returns true if field swfFile is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetSwfFile() {
		return this.swfFile != null;
	}

	public void setSwfFileIsSet(boolean value) {
		if (!value) {
			this.swfFile = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case SID:
			if (value == null) {
				unsetSid();
			} else {
				setSid((String) value);
			}
			break;

		case RESULT_CODE:
			if (value == null) {
				unsetResultCode();
			} else {
				setResultCode((Integer) value);
			}
			break;

		case RESULT_MSG:
			if (value == null) {
				unsetResultMsg();
			} else {
				setResultMsg((String) value);
			}
			break;

		case RES_TYPE:
			if (value == null) {
				unsetResType();
			} else {
				setResType((String) value);
			}
			break;

		case ORIGINAL_FILE:
			if (value == null) {
				unsetOriginalFile();
			} else {
				setOriginalFile((ByteBuffer) value);
			}
			break;

		case SWF_FILE:
			if (value == null) {
				unsetSwfFile();
			} else {
				setSwfFile((ByteBuffer) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case SID:
			return getSid();

		case RESULT_CODE:
			return Integer.valueOf(getResultCode());

		case RESULT_MSG:
			return getResultMsg();

		case RES_TYPE:
			return getResType();

		case ORIGINAL_FILE:
			return getOriginalFile();

		case SWF_FILE:
			return getSwfFile();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case SID:
			return isSetSid();
		case RESULT_CODE:
			return isSetResultCode();
		case RESULT_MSG:
			return isSetResultMsg();
		case RES_TYPE:
			return isSetResType();
		case ORIGINAL_FILE:
			return isSetOriginalFile();
		case SWF_FILE:
			return isSetSwfFile();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof DResData)
			return this.equals((DResData) that);
		return false;
	}

	public boolean equals(DResData that) {
		if (that == null)
			return false;

		boolean this_present_sid = true && this.isSetSid();
		boolean that_present_sid = true && that.isSetSid();
		if (this_present_sid || that_present_sid) {
			if (!(this_present_sid && that_present_sid))
				return false;
			if (!this.sid.equals(that.sid))
				return false;
		}

		boolean this_present_resultCode = true;
		boolean that_present_resultCode = true;
		if (this_present_resultCode || that_present_resultCode) {
			if (!(this_present_resultCode && that_present_resultCode))
				return false;
			if (this.resultCode != that.resultCode)
				return false;
		}

		boolean this_present_resultMsg = true && this.isSetResultMsg();
		boolean that_present_resultMsg = true && that.isSetResultMsg();
		if (this_present_resultMsg || that_present_resultMsg) {
			if (!(this_present_resultMsg && that_present_resultMsg))
				return false;
			if (!this.resultMsg.equals(that.resultMsg))
				return false;
		}

		boolean this_present_resType = true && this.isSetResType();
		boolean that_present_resType = true && that.isSetResType();
		if (this_present_resType || that_present_resType) {
			if (!(this_present_resType && that_present_resType))
				return false;
			if (!this.resType.equals(that.resType))
				return false;
		}

		boolean this_present_originalFile = true && this.isSetOriginalFile();
		boolean that_present_originalFile = true && that.isSetOriginalFile();
		if (this_present_originalFile || that_present_originalFile) {
			if (!(this_present_originalFile && that_present_originalFile))
				return false;
			if (!this.originalFile.equals(that.originalFile))
				return false;
		}

		boolean this_present_swfFile = true && this.isSetSwfFile();
		boolean that_present_swfFile = true && that.isSetSwfFile();
		if (this_present_swfFile || that_present_swfFile) {
			if (!(this_present_swfFile && that_present_swfFile))
				return false;
			if (!this.swfFile.equals(that.swfFile))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_sid = true && (isSetSid());
		list.add(present_sid);
		if (present_sid)
			list.add(sid);

		boolean present_resultCode = true;
		list.add(present_resultCode);
		if (present_resultCode)
			list.add(resultCode);

		boolean present_resultMsg = true && (isSetResultMsg());
		list.add(present_resultMsg);
		if (present_resultMsg)
			list.add(resultMsg);

		boolean present_resType = true && (isSetResType());
		list.add(present_resType);
		if (present_resType)
			list.add(resType);

		boolean present_originalFile = true && (isSetOriginalFile());
		list.add(present_originalFile);
		if (present_originalFile)
			list.add(originalFile);

		boolean present_swfFile = true && (isSetSwfFile());
		list.add(present_swfFile);
		if (present_swfFile)
			list.add(swfFile);

		return list.hashCode();
	}

	@Override
	public int compareTo(DResData other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetSid()).compareTo(other.isSetSid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sid, other.sid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetResultCode()).compareTo(other.isSetResultCode());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetResultCode()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultCode, other.resultCode);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetResultMsg()).compareTo(other.isSetResultMsg());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetResultMsg()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultMsg, other.resultMsg);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetResType()).compareTo(other.isSetResType());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetResType()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resType, other.resType);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetOriginalFile()).compareTo(other.isSetOriginalFile());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetOriginalFile()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originalFile, other.originalFile);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetSwfFile()).compareTo(other.isSetSwfFile());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSwfFile()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.swfFile, other.swfFile);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("DResData(");
		boolean first = true;

		sb.append("sid:");
		if (this.sid == null) {
			sb.append("null");
		} else {
			sb.append(this.sid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("resultCode:");
		sb.append(this.resultCode);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("resultMsg:");
		if (this.resultMsg == null) {
			sb.append("null");
		} else {
			sb.append(this.resultMsg);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("resType:");
		if (this.resType == null) {
			sb.append("null");
		} else {
			sb.append(this.resType);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("originalFile:");
		if (this.originalFile == null) {
			sb.append("null");
		} else {
			org.apache.thrift.TBaseHelper.toString(this.originalFile, sb);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("swfFile:");
		if (this.swfFile == null) {
			sb.append("null");
		} else {
			org.apache.thrift.TBaseHelper.toString(this.swfFile, sb);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java
			// serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class DResDataStandardSchemeFactory implements SchemeFactory {
		public DResDataStandardScheme getScheme() {
			return new DResDataStandardScheme();
		}
	}

	private static class DResDataStandardScheme extends StandardScheme<DResData> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, DResData struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // SID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.sid = iprot.readString();
						struct.setSidIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // RESULT_CODE
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.resultCode = iprot.readI32();
						struct.setResultCodeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // RESULT_MSG
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.resultMsg = iprot.readString();
						struct.setResultMsgIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // RES_TYPE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.resType = iprot.readString();
						struct.setResTypeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // ORIGINAL_FILE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.originalFile = iprot.readBinary();
						struct.setOriginalFileIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // SWF_FILE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.swfFile = iprot.readBinary();
						struct.setSwfFileIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, DResData struct) throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.sid != null) {
				oprot.writeFieldBegin(SID_FIELD_DESC);
				oprot.writeString(struct.sid);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(RESULT_CODE_FIELD_DESC);
			oprot.writeI32(struct.resultCode);
			oprot.writeFieldEnd();
			if (struct.resultMsg != null) {
				oprot.writeFieldBegin(RESULT_MSG_FIELD_DESC);
				oprot.writeString(struct.resultMsg);
				oprot.writeFieldEnd();
			}
			if (struct.resType != null) {
				oprot.writeFieldBegin(RES_TYPE_FIELD_DESC);
				oprot.writeString(struct.resType);
				oprot.writeFieldEnd();
			}
			if (struct.originalFile != null) {
				oprot.writeFieldBegin(ORIGINAL_FILE_FIELD_DESC);
				oprot.writeBinary(struct.originalFile);
				oprot.writeFieldEnd();
			}
			if (struct.swfFile != null) {
				oprot.writeFieldBegin(SWF_FILE_FIELD_DESC);
				oprot.writeBinary(struct.swfFile);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class DResDataTupleSchemeFactory implements SchemeFactory {
		public DResDataTupleScheme getScheme() {
			return new DResDataTupleScheme();
		}
	}

	private static class DResDataTupleScheme extends TupleScheme<DResData> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, DResData struct) throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetSid()) {
				optionals.set(0);
			}
			if (struct.isSetResultCode()) {
				optionals.set(1);
			}
			if (struct.isSetResultMsg()) {
				optionals.set(2);
			}
			if (struct.isSetResType()) {
				optionals.set(3);
			}
			if (struct.isSetOriginalFile()) {
				optionals.set(4);
			}
			if (struct.isSetSwfFile()) {
				optionals.set(5);
			}
			oprot.writeBitSet(optionals, 6);
			if (struct.isSetSid()) {
				oprot.writeString(struct.sid);
			}
			if (struct.isSetResultCode()) {
				oprot.writeI32(struct.resultCode);
			}
			if (struct.isSetResultMsg()) {
				oprot.writeString(struct.resultMsg);
			}
			if (struct.isSetResType()) {
				oprot.writeString(struct.resType);
			}
			if (struct.isSetOriginalFile()) {
				oprot.writeBinary(struct.originalFile);
			}
			if (struct.isSetSwfFile()) {
				oprot.writeBinary(struct.swfFile);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, DResData struct) throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(6);
			if (incoming.get(0)) {
				struct.sid = iprot.readString();
				struct.setSidIsSet(true);
			}
			if (incoming.get(1)) {
				struct.resultCode = iprot.readI32();
				struct.setResultCodeIsSet(true);
			}
			if (incoming.get(2)) {
				struct.resultMsg = iprot.readString();
				struct.setResultMsgIsSet(true);
			}
			if (incoming.get(3)) {
				struct.resType = iprot.readString();
				struct.setResTypeIsSet(true);
			}
			if (incoming.get(4)) {
				struct.originalFile = iprot.readBinary();
				struct.setOriginalFileIsSet(true);
			}
			if (incoming.get(5)) {
				struct.swfFile = iprot.readBinary();
				struct.setSwfFileIsSet(true);
			}
		}
	}
}